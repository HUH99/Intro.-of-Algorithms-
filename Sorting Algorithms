#INSERTION SORT
#my version
def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        if arr[i-1] > arr[i]:
            for j in range(i-1, -1, -1):                
                if arr[j] <= key:
                    arr[j+1] = key
                    break
                else: arr[j+1] = arr[j]
                

#class version
def insertionSort2(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        #Move elements of arr[0...i-1], that are greater than key, to one posiotion ahead of their current position
        j = i-1
        while j>=0 and key < arr[j]:
            arr[j+1] = arr[j]
        arr[j+1] = key
        
#내림차순 정렬 
def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j=i-1
        while j>=0 and arr[j]<key:
            arr[j+1] = arr[j]
            j-=1
        arr[j+1] = key
        
        
#MERGING SORT
#my version
def mergeSort(arr):
    if len(arr) <= 1:
        return arr
    if len(arr) > 1:
        mid = len(arr)//2
        leftArr = mergeSort(arr[:mid])
        rightArr = mergeSort(arr[mid:])

        sortedArr = []
        j = k = 0
        while j < len(leftArr) and k < len(rightArr):
            if leftArr[j] <= rightArr[k]:
                sortedArr.append(leftArr[j])
                j+=1
            else:
                sortedArr.append(rightArr[k])
                k+=1
        sortedArr += leftArr[j:]
        sortedArr += rightArr[k:]
        return sortedArr

#class version
def mergeSort2(arr):
    if len(arr) > 1:
        # Finding the mid of the array
        mid = len(arr)//2

        # Dividing the array elements in to 2 halves
        L = arr[:mid]
        R = arr[mid:]

        #Sorting the first half
        mergeSort(L)

        #Sorting the second half
        mergeSort(R)

        i = j = k = 0

        #Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1 
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

# Selection Sort
def selectionSort(arr):
    for i in range(0, len(arr)-1):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx= j
        (arr[i], arr[min_idx]) = (arr[min_idx], arr[i])
        
# Quick Sort
def quickSort(arr, left, right):
    if left < right:
        partition_idx = partition(arr, left, right)
        quickSort(arr, left, partition_idx-1)
        quickSort(arr, partition_idx+1, right)

def partition(arr, left, right):
    pivot = arr[right]
    i = left
    j = right - 1
    while i < j:
        while arr[i] < pivot and i < right:
            i+=1
        while arr[j] >= pivot and j > left:
            j-=1
        if i < j:
            arr[i], arr[j] = arr[j], arr[i]
    if arr[i] > pivot:
        arr[i], arr[right] = arr[right], arr[i]
    return i

