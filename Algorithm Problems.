# Problem 1
def mergeSort(nums):
    if len(nums) > 1:
        leftArr = nums[:len(nums)//2]
        mergeSort(leftArr)
        rightArr = nums[len(nums)//2:]
        mergeSort(rightArr)
        nums.clear()

        j = k = 0
        while j < len(leftArr) and k < len(rightArr):
            if leftArr[j] <= rightArr[k]:
                nums.append(leftArr[j])
                j+=1
            else:
                nums.append(rightArr[k])
                k+=1
        nums += leftArr[j:]
        nums += rightArr[k:]

def findTarget(numArr, target):
    # target과 일치하는 숫자가 있을 때
    for i in range(len(numArr)):
        if numArr[i] == target:
            return i+1
    # target과 일치하는 숫자가 없을 때
    for i in range(len(numArr)):
        if numArr[i] > target:
            return i+1
    return len(numArr)+1
            
        
def solve(nums, target):
    mergeSort(nums)
    sortedArr = nums
    print(findTarget(sortedArr, target))
    
# test
nums = list(map(int, input().split()))

print(nums)

print("target = ", end= " ")
target = int(input())

solve(nums, target)

# Problem 2
def rotateMat(mat):
    if len(mat) % 2 == 0:
        for i in range(len(mat)//2):
            for j in range(len(mat[i])):
                key = mat[len(mat)-i-1][len(mat)-j-1]
                mat[len(mat)-i-1][len(mat)-j-1] = mat[i][j]
                mat[i][j] = key
    else:
        i = 0
        while i < len(mat)//2:
            for j in range(len(mat[i])):
                key = mat[len(mat)-i-1][len(mat)-j-1]
                mat[len(mat)-i-1][len(mat)-j-1] = mat[i][j]
                mat[i][j] = key
            i+=1
        # 가운데 row의 경우
        for j in range(len(mat[i])//2):
            key = mat[i][len(mat)-j-1]
            mat[i][len(mat)-j-1] = mat[i][j]
            mat[i][j] = key

#test
print("몇 곱하기 몇 행렬인가?", end = " ")
mat = []
n = int(input())
for i in range(n):
    mat.append(list(map(int, input().split())))
rotateMat(mat)
print("Output:", mat)

# Problem 3
# recursive function
def maxScore(nums, i, j):
    nums = [1] + nums + [1]
    if i>j:
        return 0
    _max = 0
    for k in range(i, j+1):
        score = nums[i-1]*nums[k]*nums[j+1] + maxScore(i, k-1) + maxScore(k+1, j)
        if score > _max:
            _max = score
    return _max

# Dynamic Programming by Tabulation
def maxScore(nums):
    n = len(nums)
    # input list 양쪽에 1 추가
    nums = [1] + nums + [1]
    # tabulation할 2차원 array 생성
    m = [[0 for a in range(n+2)] for b in range(n+2)]

    for L in range(0, n):
        for i in range(1, n + 1 - L):
            j = i + L
            _max = 0
            for k in range(i, j+1):
                score = nums[i-1]*nums[k]*nums[j+1] + m[i][k-1] + m[k + 1][j]
                if score > _max:
                    m[i][j] = score
                    _max = score
    return m[1][n] 

# max 함수 이용
def maxScore2(nums):
    n = len(nums)
    # input list 양쪽에 1 추가
    nums = [1] + nums + [1]
    # tabulation할 2차원 array 생성
    m = [[0 for a in range(n+2)] for b in range(n+2)]

    for L in range(0, n):
        for i in range(1, n + 1 - L):
            j = i + L
            for k in range(i, j+1):
                m[i][j] = max(m[i][j], nums[i-1]*nums[k]*nums[j+1] + m[i][k-1] + m[k + 1][j])

    return m[1][n] 

# Test

nums = [3, 1, 5, 8]
print(maxScore(nums))
print(maxScore2(nums))

nums2 = [1, 3, 5, 6, 2]
print(maxScore(nums2))
print(maxScore2(nums2))
